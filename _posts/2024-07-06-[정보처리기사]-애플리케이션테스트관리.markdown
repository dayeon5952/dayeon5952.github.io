---
title: "[정보처리기사] 애플리케이션 테스트 관리"
date: 2024-07-06 00:34:00 +09:00
categories: [정보처리기사]
tags: [정보처리기사, 애플리케이션 테스트 관리 ]
---

## 애플리케이션 테스트 관리

#### **애플리케이션 테스트의 기본 원리**

- **파레토 법칙(Pareto Principle)** : 애플리케이션의 20%에 해당하는 코드에서 전체 결함의 80%가 발견된다는 법칙
- **살충제 패러독스(Pesticide Paradox)** : 동일한 테스트 케이스로 동일한 테스트를 반복하면 더 이상 결함이 발견되지 않은 현상
- **오류-부재의 궤변(Absence of Errors Fallacy)** : 소프트웨어의 결함을 모두 제거해도 사용자의 요구사항을 만족시키지 못하면 해당 소프트웨어는 품질이 높다고 말할 수 없는 것

#### **프로그램 실행 여부에 따른 테스트**

- **정적 테스트**
  * 프로그램을 실행하지 않고 명세서나 소스 코드를 대상으로 분석하는 테스트
  * 소스 코드에 대한 코딩 표준, 코딩 스타일, 코드 복잡도, 남은 결함 등을 발견하기 위해 사용
  * **종류** : 워크스루, 인스펙션, 코드 검사 등
- **동적 테스트**
  * 프로그램을 실행하여 오류를 찾는 테스트
  * 소프트웨어 개발의 모든 단계에서 테스트를 수행
  * **종류** : 블랙박스 테스트, 화이트박스 테스트

#### **시각에 따른 테스트**

- **검증(Verification) 테스트**
  * 개발자의 시각에서 제품의 생산 과정을 테스트하는 것
  * 제품이 명세서대로 완성됐는지를 테스트함
- **확인(Validation) 테스트**
  * 사용자의 시각에서 생산된 제품의 결과를 테스트하는 것
  * 사용자가 요구한대로 제품이 완성됐는지, 제품이 정상적으로 동작하는지를 테스트

#### **목적에 따른 테스트**

- **회복(Recovery) 테스트**<br/>
시스템에 여러 가지 결함을 주어 실패하도록 한 후 올바르게 복귀되는지를 확인하는 테스트
- **안전(Security) 테스트**<br/>
시스템에 설치된 시스템 보호 도구가 불법적인 침입으로부터 시스템을 보호할 수 있는지를 확인하는 테스트
- **강도(Stress) 테스트**<br/>
시스템에 과도한 정보량이나 빈도 등을 부과하여 과부하 시에도 소프트웨어가 정상적으로 실행되는지를 확인하는 테스트
- **성능(Performance) 테스트**<br/>
소프트웨어의 실시간 성능이나 전체적인 효율성을 진단하는 테스트로, 소프트웨어의 응답 시간, 처리량 등을 테스트
- **구조(Structure) 테스트**<br/>
소프트웨어 내부의 논리적인 경로, 소스 코드의 복잡도 등을 평가하는 테스트
- **회귀(Regression) 테스트**<br/>
소프트웨어의 변경 또는 수정된 코드에 새로운 결함이 없음을 확인하는 테스트
- **병행(Parallel) 테스트**<br/>
변경되는 소프트웨어와 기존 소프트웨어에 동일한 데이터를 입력하여 결과를 비교하는 테스트

#### **화이트박스 테스트(White Box Test)**

- 모듈의 원시 코드(Source Code)를 오픈시킨 상태에서 **<span style="background-color:#fff5b1">원시 코드의 논리적인 모든 경로를 테스트하여 테스트 케이스를 설계하는 방법</span>**
- 모듈 안의 작동을 직접 관찰할 수 있음
- 원시 코드의 모든 문장을 한 번 이상 실행함으로써 수행됨

#### **화이트박스 테스트의 종류**

- **기초 경로 검사(Base Path Testing)**
  * 테스트 케이스 설계자가 절차적 설계의 논리적 복잡성을 측정할 수 있게 해주는 테스트 기법
  * 대표적인 화이트박스 테스트 기법
- **제어 구조 검사(Control Structure Testing)**
  * **조건 검사(Condition Testing)** : 프로그램 모듈 내에 있는 논리적 조건을 테스트하는 테스트 케이스 설계 기법
  * **루프 검사(Loop Testing)** : 프로그램의 반복(Loop) 구조에 초점을 맞춰 실시하는 테스트 케이스 설계 기법
  * **데이터 흐름 검사(Data Flow Testing)** : 프로그램에서 변수의 정의와 변수 사용의 위치에 초점을 맞춰 실시하는 테스트 케이스 설계 기법

#### **화이트박스 테스트의 검증 기준**

- **문장 검증 기준(Statement Coverage)**<br/>
소스 코드의 모든 구문이 한 번 이상 수행되도록 테스트 케이스를 설계
- **분기 검증 기준(Branch Coverage)**
  * 소스 코드의 모든 조건문에 대해 조건식의 결과가 True인 경우와 False인 경우가 한 번 이상 수행되도록 테스트 케이스를 설계
  * 결정 검증 기준(Decision Coverage)이라고도 함
- **조건 검증 기준(Condition Coverage)**<br/>
소스 코드의 조건문에 포함된 개별 조건식의 결과가 True인 경우와 False인 경우가 한 번 이상 수행되도록 테스트 케이스를 설계
- **분기/조건 검증 기준(Branch/Condition Coverage)**<br/>
분기 검증 기준과 조건 검증 기준을 모두 만족하는 설계로, 조건문이 True인 경우와 False인 경우에 따라 조건 검증 기준의 입력 데이터를 구분하는 테스트 케이스를 설계함

#### **블랙박스 테스트(Black Box Test)**

- 소프트웨어가 수행할 특정 기능을 알기 위해서 **<span style="background-color:#fff5b1">각 기능이 완전히 작동되는 것을 입증하는 테스트</span>**로, 기능 테스트라고도 함
- 사용자의 요구사항 명세를 보면서 테스트함
- 주로 구현된 기능을 테스트
- 소프트웨어 인터페이스를 통해 실시됨

