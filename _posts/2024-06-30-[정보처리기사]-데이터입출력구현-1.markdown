---
title: "[정보처리기사] 데이터 입·출력 구현 1"
date: 2024-06-30 00:34:00 +09:00
categories: [정보처리기사]
tags: [정보처리기사, 데이터 입·출력 구현, 스키마, 데이터베이스 설계 순서, 개념적 설계, 논리적 설계, 물리적 설계, 데이터모델, E-R 다이어그램, 관계형 데이터베이스의 릴레이션 구조, 튜플, 속성, 후보키, 슈퍼키, 외래키, 무결성, 관계대수, 순수 관계 연산자, 일반 집합 연산자, 이상, 함수적 종속, 정규화 ,정규화 과정, 정규화 과정 정리, 반정규화, 시스템 카탈로그, 트랜잭션, 트랜잭션의 특성, CRUD 분석, 인덱스]
---

## 데이터 입·출력 구현 1

#### **스키마(Schema)**

- **<span style="background-color: #fff5b1">데이터베이스의 구조와 제약조건에 관한 전반적인 명세를 기술</span>**
<table>
<thead>
<tr>
<th class="text-center">종류</th>
<th class="text-center">내용</th>
</tr>
</thead>
<tbody>
<tr>
<td style="white-space: pre;">외부 스키마</td>
<td style="white-space: normal;">사용자나 응용 프로그래머가 각 개인의 입장에서 필요로하는 데이터베이스의 논리적 구조를 정의한 것</td>
</tr>
<tr>
<td style="white-space: pre;">개념 스키마</td>
<td style="white-space: normal;">
<ul>
<li>데이터베이스의 전체적인 논리적 구조</li>
<li>모든 응용 프로그램이나 사용자들이 필요로 하는 데이터를 종합한 조직 전체의 데이터베이스로, 하나만 존재함</li>
</ul>
</td>
</tr>
<tr>
<td style="white-space: pre;">내부 스키마</td>
<td style="white-space: normal;">
<ul>
<li>물리적 저장장치의 입장에서 본 데이터베이스 구조</li>
<li>실제로 저장될 레코드의 형식, 저장 데이터 항목의 표현 방법, 내부 레코드의 물리적 순서 등을 나타냄</li>
</ul>
</td>
</tr>
</tbody>
</table>

#### **데이터베이스 설계 순서**

![image](post/데이터베이스설계순서.png){: width="60%"}

#### **개념적 설계(정보 모델링, 개념화)**

- 정보의 구조를 얻기 위하여 현실 세계의 무한성과 계속성을 이해하고, 다른 사람과 통신하기 위하여 **<span style="background-color:#fff5b1">현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정</span>**
- 개념적 설계에서는 개념 스키마 모델링과 트랜잭션 모델링을 병행 수행
- 개념적 설계에서는 요구 분석에서 나온 결과인 요구 조건 명세를 DBMS에 독립적인 E-R 다이어그램으로 작성

#### **논리적 설계(데이터 모델링)**

- **<span style="background-color:#fff5b1">현실 세계에서 발생하는 자료를</span>** 컴퓨터가 이해하고 처리할 수 있는 물리적 저장장치에 저장할 수 있도록 변환하기 위해 **<span style="background-color:#fff5b1">특정 DBMS가 지원하는 논리적 자료 구조로 변환(mapping)시키는 과정</span>**
- 개념 세계의 데이터를 필드로 기술된 데이터 타입과 이 데이터 타입들 간의 관계로 표현되는 논리적 구조의 데이터로 모델화함
- 개념적 설계가 개념 스키마를 설계하는 단계라면, 논리적 설계에서는 개념 스키마를 평가 및 정제하고 DBMS에 따라 서로 다른 논리적 스키마를 설계하는 단계

#### **물리적 설계(데이터 구조화)**

- **<span style="background-color: #fff5b1">논리적 설계에서 논리적 구조로 표현된 데이터를</span>** 디스크 등의 물리적 저장장치에 저장할 수 있는 **<span style="background-color: #fff5b1">물리적 구조의 데이터로 변환하는 과정</span>**
- 물리적 설계에서는 다양한 데이터베이스 응용에 대해 처리 성능을 얻기 위해 데이터베이스 파일의 저장 구조 및 액세스 경로를 결정
- 저장 레코드의 형식, 순서, 접근 경로, 조회 집중 레코드 등의 정보를 사용하여 데이터가 컴퓨터에 저장되는 방법을 묘사

#### **데이터모델**

- **<span style="background-color:#fff5b1">현실 세계의 정보들을</span>** 컴퓨터에 표현하기 위해서 단순화, 추상화하여 **<span style="background-color: #fff5b1">체계적으로 표현한 개념적 모형</span>**
- **데이터 모델에 표시할 요소**
<table>
<thead>
<tr>
<th class="text-center">요소</th>
<th class="text-center">내용</th>
</tr>
</thead>
<tbody>
<tr>
<td style="white-space: pre;">구조(Structure)</td>
<td style="white-space: normal;">논리적으로 표현된 개체 타입들 간의 관계로서 데이터 구조 및 정적 성질 표현</td>
</tr>
<tr>
<td style="white-space: pre;">연산(Operation)</td>
<td style="white-space: normal;">데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세로서 데이터베이스를 조작하는 기본 도구</td>
</tr>
<tr>
<td style="white-space: pre;">제약 조건(Constraint)</td>
<td style="white-space: normal;">데이터베이스에 저장될 수 있는 실제 데이터의 논리적인 제약 조건</td>
</tr>
</tbody>
</table>

#### **E-R 다이어그램**

<table>
<thead>
<tr>
<th class="text-center">기호</th>
<th class="text-center">기호 이름</th>
<th class="text-center">의미</th>
</tr>
</thead>
<tbody>
<tr>
<td class="text-center">
<img src='post/ER다이어그램_사각형.png'>
</td>
<td style="white-space: pre;">사각형</td>
<td style="white-space: normal;">개체(Entity) 타입</td>
</tr>
<tr>
<td class="text-center">
<img src='post/ER다이어그램_마름모.png'>
</td>
<td style="white-space: pre;">마름모</td>
<td style="white-space: normal;">관계(Relationship) 타입</td>
</tr>
<tr>
<td class="text-center">
<img src='post/ER다이어그램_타원.png'>
</td>
<td style="white-space: pre;">타원</td>
<td style="white-space: normal;">속성(Attribute)</td>
</tr>
<tr>
<td class="text-center">
<img src='post/ER다이어그램_이중타원.png'>
</td>
<td style="white-space: pre;">이중 타원</td>
<td style="white-space: normal;">다중값 속성(복합 속성)</td>
</tr>
<tr>
<td class="text-center">
<img src='post/ER다이어그램_밑줄타원.png'>
</td>
<td style="white-space: pre;">밑줄 타원</td>
<td style="white-space: normal;">기본키 속성</td>
</tr>
<tr>
<td class="text-center">
<img src='post/ER다이어그램_복수타원.png'>
</td>
<td style="white-space: pre;">복수 타원</td>
<td style="white-space: normal;">복합 속성</td>
</tr>
<tr>
<td class="text-center">
<img src='post/ER다이어그램_관계.png'>
</td>
<td style="white-space: pre;">관계</td>
<td style="white-space: normal;">1:1, 1:N, N:M 등의 개체 간 관계에 대한 대응수를 선 위에 기술</td>
</tr>
<tr>
<td class="text-center"><img src='post/ER다이어그램_선.png'></td>
<td style="white-space: pre;">선, 링크</td>
<td style="white-space: normal;">개체 타입과 속성을 연결</td>
</tr>
</tbody>
</table>

#### **관계형 데이터베이스의 릴레이션 구조**

- 릴레이션(Relation)은 데이터들을 표(Table)의 형태로 표현한 것으로, 구조를 나타내는 릴레이션 스키마와 실제 값들인 릴레이션 인스턴스로 구성

#### **튜플(Tuple)**

- **<span style="background-color: #fff5b1">릴레이션을 구성하는 각각의 행</span>**
- 속성의 모임으로 구성
- 파일 구조에서 레코드와 같은 의미
- 튜플의 수를 카디널리티(Cardinality) 또는 기수, 대응수라고 함

#### **속성(Attribute)**

- **<span style="background-color:#fff5b1">데이터베이스를 구성하는 가장 작은 논리적 단위</span>**
- 파일 구조상의 데이터 항목 또는 데이터 필드에 해당
- 개체의 특성을 기술
- 속성의 수를 디그리(Degree) 또는 차수라고 함

#### **후보키(Candidate Key)**

- 릴레이션을 구성하는 **<span style="background-color: #fff5b1">속성들 중에서 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합</span>**
- 기본키로 사용할 수 있는 속성들을 말함
- 유일성(Unique)과 최소성(Minimality)을 모두 만족시켜야 함

#### **슈퍼키(Super Key)**

- 한 릴레이션 내에 있는 **<span style="background-color: #fff5b1">속성들의 집합으로 구성된 키</span>**
- 릴레이션을 구성하는 모든 튜플 중 슈퍼키로 구성된 속성의 집합과 동일한 값은 나타나지 않음
- 릴레이션을 구성하는 모든 튜플에 대해 유일성은 만족하지만, 최소성은 만족하지 못함

#### **외래키(Foreign Key)**

- **<span style="background-color:#fff5b1">다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합</span>**
- 한 릴레이션에 속한 속성 A와 참조 릴레이션의 기본키인 B가 동일한 도메인 상에서 정의되었을 때의 속성 A를 외래키라고 함
- 외래키로 지정되면 참조 릴레이션의 기본키에 없는 값은 입력할 수 없음

#### **무결성(Integrity)**

- **<span style="background-color:#fff5b1">데이터베이스에 저장된 데이터 값과</span>** 그것이 표현하는 **<span style="background-color:#fff5b1">현실 세계의 실제값이 일치하는 정확성</span>**을 의미
- **개체 무결성** : 기본 테이블의 기본키를 구성하는 어떤 속성도 Null 값이나 중복값을 가질 수 없다는 규정
- **참조 무결성** : 외래키 값은 Null이거나 참조 릴레이션의 기본키 값과 동일해야 함. 즉 릴레이션은 참조할 수 없는 외래키 값을 가질 수 없다는 규정

#### **관계대수**

- 관계형 데이터베이스에서 **<span style="background-color:#fff5b1">원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는가를 기술하는 절차적인 언어</span>**
- 릴레이션을 처리하기 위해 연산자와 연산 규칙을 제공하며, 피연산자와 연산 결과가 모두 릴레이션임
- 질의에 대한 해를 구하기 위해 수행해야 할 연산의 순서를 명시

#### **순수 관계 연산자**

- **<span style="background-color:#fff5b1">Select</span>**
  * 릴레이션에 존재하는 튜플 중에서 선택 조건을 만족하는 튜플의 부분집합을 구하여 새로운 릴레이션을 만드는 연산
  * 릴레이션의 행에 해당하는 튜플(Tuple)을 구하는 것이므로 수평 연산이라고도 함
  * **기호** : σ(시그마)
- **<span style="background-color:#fff5b1">Project</span>**
  * 주어진 릴레이션에서 속성 리스트(Attribute List)에 제시된 속성 값만을 추출하여 새로운 릴레이션을 만드는 연산
  * 릴레이션의 열에 해당하는 속성을 추출하는 것이므로 수직 연산자라고도 함
  * **기호** : 𝝅(파이)
- **<span style="background-color:#fff5b1">Join</span>**
  * 공통 속성을 중심으로 두 개의 릴레이션을 하나로 합쳐서 새로운 릴레이션을 만드는 연산
  * Join의 결과는 Cartesian Product(교차곱)를 수행한 다음 Select를 수행한 것과 같음
  * **기호** : ⋈
- **<span style="background-color:#fff5b1">Division</span>**
  * X⊃Y인 두 개의 릴레이션 R(X)와 S(Y)가 있을 때, R의 속성이 S의 속성값을 모두 가진 튜플에서 S가 가진 속성을 제외한 속성만을 구한 연산
  * **기호** : ÷

#### **일반 집합 연산자**

- **<span style="background-color: #fff5b1">합집합(UNION)</span>**
  * 두 릴레이션에 존재하는 튜플의 합집합을 구하되, 결과로 생성된 릴레이션에서 중복되는 튜플은 제거되는 연산
  * 합집합의 카디널리티는 두 릴레이션 카디널리티의 합보다 크지 않음
  * **기호** : ∪
- **<span style="background-color: #fff5b1">교집합(INTERSECTION)</span>**
  * 두 릴레이션에 존재하는 튜플의 교집합을 구하는 연산
  * 교집합의 카디널리티는 두 릴리에션 중 카디널리티가 적은 릴레이션의 카디널리티보다 크지 않음
  * **기호** : ∩
- **<span style="background-color: #fff5b1">차집합(DIFFERENCE)</span>**
  * 두 릴레이션에 존재하는 튜플의 차집합을 구하는 연산
  * 차집합의 카디널리티는 릴레이션 R의 카디널리티 보다 크지 않음
  * **기호** : －
- **<span style="background-color: #fff5b1">교차곱(CARTESIAN PRODUCT)</span>**
  * 두 릴레이션에 있는 튜플들의 순서쌍을 구하는 연산
  * 교차곱의 디그리(Degree)는 두 릴레이션의 디그리를 더한 것과 같고, 카디널리티(Cardinality)는 두 릴레이션의 카디널리티를 곱한 것과 같음
  * **기호** : ×

#### **이상(Anomaly)**

- 데이터베이스 내에 **<span style="background-color: #fff5b1">데이터들이 불필요하게 중복되어 릴레이션 조작 시 예기치 않게 발생하는 곤란한 현상</span>**을 의미
- **삽입 이상(Insertion Anomaly)** : 테이블에 데이터를 삽입할 때 의도와는 상관없이 원하지 않은 값들로 인해 삽입할 수 없게 되는 현상
- **삭제 이상(Deletion Anomaly)** : 테이블에서 튜플을 삭제할 때 의도와는 상관없는 값들도 함께 삭제되는, 즉 연쇄 삭제가 발생하는 현상
- **갱신 이상(Update Anomaly)** : 테이블에서 튜플에 있는 속성 값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 불일치성(Inconsistency)이 생기는 현상

#### **함수적 종속**

- **<span style="background-color:#fff5b1">함수적 종속(Functional Dependency)</span>**
  * 어떤 테이블 R에서 X와 Y를 각각 R의 속성 집합의 부분 집합이라 하자. 속성 X의 값 각각에 대해 시간에 관계없이 항상 속성 Y의 값이 오직 하나만 연관되어 있을 때 Y는 X에 함수적 종속 또는 X가 Y를 함수적으로 결정한다고 하고, X → Y로 표기
  * 함수적 종속은 데이터의 의미를 표현하는 것으로, 현실 세계를 표현하는 제약 조건이 되는 동시에 데이터베이스에서 항상 유지되어야 할 조건
- **<span style="background-color:#fff5b1">완전 함수적 종속</span>**<br/>
  어떤 테이블 R에서 속성 Y가 다른 속성 집합 X 전체에 대해 함수적 종속이면서 속성 집합 X의 어떠한 진부분 집합 Z(즉, Z ⊂ X)에도 함수적 종속이 아닐 때 속성 Y는 속성 집합 X에 와전 함수적 종속이라고 함
- **<span style="background-color:#fff5b1">부분 함수적 종속</span>**<br/>
  어떤 테이블 R에서 속성 Y가 다른 속성 집합 X 전체에 대해 함수적 종속이면서 속성 집합 X의 임의의 진부분 집합에 대해 함수적 종속일 때, 속성 Y는 속성 집합 X에 부분 함수적 종속이라고 함

#### **정규화(Normalization)**

- **<span style="background-color:#fff5b1">테이블의 속성들이 상호 종속적인 관계를 갖는 특성을 이용하여 테이블을 무손실 분해하는 과정</span>**
- 정규화의 목적은 가능한 한 중복을 제거하여 삽입, 삭제, 갱신 이상의 발생 가능성을 줄이는 것
- 정규형에는 제 1정규형(1NF), 제 2정규형(2NF), 제 3정규형(3NF), BCNF, 제 4정규형(4NF), 제 5정규형(5NF)이 있으며, 순서대로 정규화의 정도가 높아짐

#### **정규화 과정**

- **<span style="background-color:#fff5b1">제 1정규형(1NF; First Normal Form)</span>**
  * 테이블 R에 속한 모든 속성의 도메인(Domain)이 원자 값(Atomic Value)만으로 되어 있는 정규형. 즉 테이블의 모든 속성 값이 원자 값으로만 되어 있는 정규형
- **<span style="background-color:#fff5b1">제 2정규형(2NF; Second Normal From)</span>**
  * 테이블 R이 제 1정규형이고, 기본키가 아닌 모든 속성이 기본키에 대하여 완전 함수적 종속을 만족하는 정규형
- **<span style="background-color:#fff5b1">제 3정규형(3NF; Third Normal From)</span>**
  * 테이블 R이 제 2정규형이고, 기본키가 아닌 모든 속성이 기본키에 대해 이행적 함수적 종속(Transitive Functional Dependency)을 만족하지 않는 정규형
- **<span style="background-color:#fff5b1">BCNF(Boyce-Codd Normal Form)</span>**
  * 테이블 R에서 모든 결정자가 후보키(Candidate Key)인 정규형
  * 일반적으로 제 3정규형에 후보키가 여러 개 존재하고, 이러한 후보키들이 서로 중첩되어 나타나는 경우에 적용 가능
- **<span style="background-color:#fff5b1">제 4정규형(4NF; Fourth Normal From)</span>**
  * 테이블 R에 다중 값 종속(MVD; Multi Valued Dependency) A ↠ B가 존재할 경우 R의 모든 속성이 A에 함수적 종속 관계를 만족하는 정규형
  * **다중 값 종속(다치 종속)**  : A, B, C 3개의 속성을 가진 테이블 R에서 어떤 복합 속성(A, C)에 대응하는 B 값의 집합이 A 값에만 종속되고 C 값에는 무관하면, B는 A에 다중 값 종속이라 하고, A ↠ B로 표기함
- **<span style="background-color:#fff5b1">제 5정규형(5NF; Fifth Normal From)</span>**
  * 테이블 R의 모든 조인 종속(JD; Join Dependency)이 R의 후보키를 통해서만 성립되는 정규형
  * **조인 종속** : 어떤 테이블 R의 속성에 대한 부분 집합 X, Y, ···, Z가 있다고 하자. 이때 만일 테이블 R이 자신의 프로젝션(Projection) X, Y, ···, Z를 모두 조인한 결과와 동일한 경우 테이블 R은 조인 종속 JD(X, Y, ···, Z)를 만족한다고 함

#### **정규화 과정 정리**

![image](post/정규화과정정리.png){: width="55%"}

#### **반정규화(Denormalization)**

- 시스템의 성능을 향상하고 개발 및 운영의 편의성 등을 높이기 위해 **<span style="background-color: #fff5b1">정규화된 데이터 모델을 의도적으로 통합, 중복, 분리하여 정규화 원칙을 위배하는 행위</span>**
- 반정규화를 수행하면 시스템의 성능이 향상되고 관리 효율성은 증가하지만 데이터의 일관성 및 정합성이 저하될 수 있음
- 과도한 반정규화는 오히려 성능을 저하시킬 수 있음

#### **시스템 카탈로그(System Catalog)**

- 시스템 그 자체에 관련이 있는 <span style="background-color: #fff5b1">다양한 객체에 관한 정보를 포함하는 시스템 데이터베이스</span>**
- 시스템 카탈로그 내의 각 테이블은 사용자를 포함하여 DBMS에서 지원하는 모든 데이터 객체에 대한 정의나 명세에 관한 정보를 유지 관리하는 시스템 테이블
- 카탈로그들이 생성되면 데이터 사전(Data Dictionary)에 저장되기 때문에 좁은 의미로는 카탈로그를 데이터 사전이라고도 함

#### **트랜잭션(Transaction)**

- 데이터베이스의 상태를 변환시키는 하나의 **<span style="background-color: #fff5b1">논리적 기능을 수행하기 위한 작업의 단위 또는 한꺼번에 모두 수행되어야 할 일련의 연산</span>**들을 의미
- 데이터베이스 시스템에서 병행 제어 및 회복 작업 시 처리되는 작업의 논리적 단위로 사용
- 사용자가 시스템에 대한 서비스 요구 시 시스템이 응답하기 위한 상태 변환 과정의 작업 단위로 사용

#### **트랜잭션의 특성**

<table>
<thead>
<tr>
<th class="text-center">특성</th>
<th class="text-center">의미</th>
</tr>
</thead>
<tbody>
<tr>
<td style="white-space: pre;">Atomicity(원자성)</td>
<td style="white-space: normal;">트랜잭션의 연산은 데이터베이스에 모두 반영되도록 완료(Commit)되든지 아니면 전혀 반영되지 않도록 복구(Rollback)되어야 함</td>
</tr>
<tr>
<td style="white-space: pre;">Consistency<br/>(일관성)</td>
<td style="white-space: normal;">트랜잭션이 그 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환함</td>
</tr>
<tr>
<td style="white-space: pre;">Isolation<br/>(독립성, 격리성,<br/>순차성)</td>
<td style="white-space: normal;">둘 이상의 트랜잭션이 동시에 병행 실행되는 경우 어느 하나의 트랜잭션 실행중에 다른 트랜잭션의 연산이 끼어들 수 없음</td>
</tr>
<tr>
<td style="white-space: pre;">Durability<br/>(영속성, 지속성)</td>
<td style="white-space: normal;">성공적으로 완료된 트랜잭션의 결과는 시스템이 고장나더라도 영구적으로 반영되어야 함</td>
</tr>
</tbody>
</table>

#### **CRUD 분석**

- **<span style="background-color:#fff5b1">프로세스와 테이블 간에 CRUD 매트릭스를 만들어서 트랜잭션을 분석하는 것</span>**
- CRUD 분석을 통해 많은 트랜잭션이 몰리는 테이블을 파악할 수 있으므로 디스크 구성 시 유용한 자료로 활용할 수 있음
- CRUD 매트릭스의 각 셀에는 Create(생성), Read(읽기), Update(갱신), Delete(삭제)의 앞 글자가 들어감

#### **인덱스(Index, 색인)**

- **<span style="background-color:#fff5b1">데이터 레코드를 빠르게 접근하기 위해 <키 값, 포인터> 쌍으로 구성되는 데이터 구조</span>**
- 레코드가 저장된 물리적 구조에 접근하는 방법을 제공
- 인덱스를 통해서 파일의 레코드에 빠르게 액세스 할 수 있음
